use huffman_compression::{Huffman, HuffmanTable, TerminalCode};

const SERVUO_HUFFMAN_TABLE_VALUES: [u32; 256] = [
    0x000, 0x01F, 0x022, 0x034, 0x075, 0x028, 0x03B, 0x032, 0x0E0, 0x062, 0x056, 0x079, 0x19D,
    0x097, 0x02A, 0x057, 0x071, 0x05B, 0x1CC, 0x0A7, 0x025, 0x04F, 0x066, 0x07D, 0x191, 0x1CE,
    0x03F, 0x090, 0x059, 0x07B, 0x091, 0x0C6, 0x02D, 0x186, 0x06F, 0x093, 0x1CC, 0x05A, 0x1AE,
    0x1C0, 0x148, 0x14A, 0x082, 0x19F, 0x171, 0x120, 0x0E7, 0x1F3, 0x14B, 0x100, 0x190, 0x013,
    0x161, 0x125, 0x133, 0x195, 0x173, 0x1CA, 0x086, 0x1E9, 0x0DB, 0x1EC, 0x08B, 0x085, 0x00A,
    0x096, 0x09C, 0x1C3, 0x19C, 0x08F, 0x18F, 0x091, 0x087, 0x0C6, 0x177, 0x089, 0x0D6, 0x08C,
    0x1EE, 0x1EB, 0x084, 0x164, 0x175, 0x1CD, 0x05E, 0x088, 0x12B, 0x172, 0x10A, 0x08D, 0x13A,
    0x11C, 0x1E1, 0x1E0, 0x187, 0x1DC, 0x1DF, 0x074, 0x19F, 0x08D, 0x0E4, 0x079, 0x0EA, 0x0E1,
    0x040, 0x041, 0x10B, 0x0B0, 0x06A, 0x0C1, 0x071, 0x078, 0x0B1, 0x14C, 0x043, 0x076, 0x066,
    0x04D, 0x08A, 0x02F, 0x0C9, 0x0CE, 0x149, 0x160, 0x1BA, 0x19E, 0x39F, 0x0E5, 0x194, 0x184,
    0x126, 0x030, 0x06C, 0x121, 0x1E8, 0x1C1, 0x11D, 0x163, 0x385, 0x3DB, 0x17D, 0x106, 0x397,
    0x24E, 0x02E, 0x098, 0x33C, 0x32E, 0x1E9, 0x0BF, 0x3DF, 0x1DD, 0x32D, 0x2ED, 0x30B, 0x107,
    0x2E8, 0x3DE, 0x125, 0x1E8, 0x0E9, 0x1CD, 0x1B5, 0x165, 0x232, 0x2E1, 0x3AE, 0x3C6, 0x3E2,
    0x205, 0x29A, 0x248, 0x2CD, 0x23B, 0x3C5, 0x251, 0x2E9, 0x252, 0x1EA, 0x3A0, 0x391, 0x23C,
    0x392, 0x3D5, 0x233, 0x2CC, 0x390, 0x1BB, 0x3A1, 0x3C4, 0x211, 0x203, 0x12A, 0x231, 0x3E0,
    0x29B, 0x3D7, 0x202, 0x3AD, 0x213, 0x253, 0x32C, 0x23D, 0x23F, 0x32F, 0x11C, 0x384, 0x31C,
    0x17C, 0x30A, 0x2E0, 0x276, 0x250, 0x3E3, 0x396, 0x18F, 0x204, 0x206, 0x230, 0x265, 0x212,
    0x23E, 0x3AC, 0x393, 0x3E1, 0x1DE, 0x3D6, 0x31D, 0x3E5, 0x3E4, 0x207, 0x3C7, 0x277, 0x3D4,
    0x0C0, 0x162, 0x3DA, 0x124, 0x1B4, 0x264, 0x33D, 0x1D1, 0x1AF, 0x39E, 0x24F, 0x373, 0x249,
    0x372, 0x167, 0x210, 0x23A, 0x1B8, 0x3AF, 0x18E, 0x2EC, 0x062,
];

const SERVUO_HUFFMAN_TABLE_BIT_COUNTS: [u8; 256] = [
    2, 5, 6, 7, 7, 6, 6, 7, 8, 8, 7, 8, 9, 8, 6, 7, 8, 8, 9, 8, 7, 7, 8, 8, 9, 9, 7, 9, 8, 8, 8, 8,
    6, 9, 8, 9, 10, 8, 10, 10, 9, 9, 9, 10, 9, 9, 9, 10, 9, 9, 9, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
    9, 9, 5, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 10,
    10, 9, 10, 10, 7, 9, 8, 8, 7, 9, 9, 8, 7, 9, 9, 8, 8, 7, 7, 8, 9, 7, 8, 7, 7, 9, 6, 8, 9, 9, 9,
    10, 10, 10, 9, 9, 9, 9, 7, 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 8, 10, 10, 10, 9,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 9, 10, 10, 11, 11, 11, 10, 10, 10, 10, 10,
    11, 10, 10, 10, 9, 11, 11, 10, 11, 11, 10, 10, 11, 10, 11, 11, 10, 10, 9, 10, 11, 10, 11, 10,
    11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 10, 10, 10, 10, 10, 10, 10, 10,
    11, 11, 11, 10, 11, 10, 11, 11, 10, 11, 10, 11, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11,
    10, 11, 9, 10, 10, 10, 11, 10, 10, 7,
];

const UO_TERMINAL_CODE_BIT_COUNT: u8 = 4;

const UO_TERMINAL_CODE_VALUE: u32 = 0xD;

#[test]
fn test_example_serv_uo_packet_is_compressed_correctly() {
    let table = HuffmanTable {
        values: SERVUO_HUFFMAN_TABLE_VALUES,
        bit_counts: SERVUO_HUFFMAN_TABLE_BIT_COUNTS,
    };

    let terminal_code = TerminalCode {
        bit_count: UO_TERMINAL_CODE_BIT_COUNT,
        value: UO_TERMINAL_CODE_VALUE,
    };

    let mut huffman = Huffman::new(table, Some(terminal_code));

    let src = vec![0xB9, 0x00, 0xFF, 0x92, 0xDB];
    let mut output = Vec::new();

    huffman.compress(src, &mut output);

    assert_eq!(output, vec![0xB3, 0x0C, 0x59, 0xE4, 0xCB, 0xA0]);
}

#[test]
fn test_example_character_list_serv_uo_packet_is_compressed_correctly() {
    let table = HuffmanTable {
        values: SERVUO_HUFFMAN_TABLE_VALUES,
        bit_counts: SERVUO_HUFFMAN_TABLE_BIT_COUNTS,
    };

    let terminal_code = TerminalCode {
        bit_count: UO_TERMINAL_CODE_BIT_COUNT,
        value: UO_TERMINAL_CODE_VALUE,
    };

    let mut huffman = Huffman::new(table, Some(terminal_code));

    let src = vec![
        0xA9, 0x02, 0x08, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x42, 0x72, 0x69, 0x74, 0x61, 0x69, 0x6E, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x68, 0x65, 0x20, 0x57, 0x61, 0x79,
        0x66, 0x61, 0x72, 0x65, 0x72, 0x27, 0x73, 0x20, 0x49, 0x6E, 0x6E, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x42, 0x00,
        0x00, 0x06, 0x37, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x10, 0x67, 0x82,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0xE8, 0xFF, 0xFF,
    ];

    let expected = vec![
        0x81, 0x62, 0xE0, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x01, 0xF2, 0x72, 0x1C, 0x1C, 0xDD, 0x20, 0xF1, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x17, 0x90, 0x3C, 0xDB, 0x72, 0xE8, 0xCE, 0x75, 0x74, 0x87, 0xE6, 0x1B, 0x80,
        0xED, 0x6B, 0x1B, 0x8F, 0x10, 0x00, 0x00, 0x00, 0x0E, 0xE7, 0x03, 0xBC, 0xA8, 0x09, 0x40,
        0xF8, 0xE2, 0xE1, 0x93, 0x00, 0x02, 0xDC, 0xEF, 0x8B, 0x16, 0x80,
    ];

    let mut output = Vec::new();

    huffman.compress(src, &mut output);

    assert_eq!(output, expected,);
}
